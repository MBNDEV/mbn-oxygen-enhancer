(async function() {
    // Inject CSS to hide Oxygen submenus until properly initialized
    (function() {
        var style = document.createElement('style');
        style.id = 'mbn-oxygen-menu-preload';
        style.textContent = '.oxy-pro-menu-container:not(.oxy-pro-menu-init) .sub-menu { visibility: hidden !important; opacity: 0 !important; }';
        document.head.appendChild(style);
    })();

    // Select all inline scripts with type="mbn-scripts-load" and no src attribute
    var scripts = document.querySelectorAll('script[type="mbn-scripts-load"]:not([src])');
    scripts.forEach(function(script) {
        var js = script.textContent || script.innerText || '';
        if (js.trim().length > 0) {
            // Create a Blob with the script content
            var blob = new Blob([js], { type: 'application/javascript' });
            var blobUrl = URL.createObjectURL(blob);
  
            // Create a new script element with src as the blob URL
            var newScript = document.createElement('script');
            newScript.src = blobUrl;
            newScript.type = "mbn-scripts-load";
            newScript.setAttribute('data-mbn-blob-inlined', '1');
  
            // If the script contains 'DOMContentLoaded', set data-mbn-blob-lastload
            if (js.indexOf('DOMContentLoaded') !== -1) {
                newScript.setAttribute('data-mbn-blob-lastload', '1');
            }
  
            // Set data-mbn-blob-lastload if script contains a jQuery document ready pattern
            // Matches: $(document).ready(, jQuery(document).ready(, $(function, jQuery(function
            var readyRegex = /(?:\$|jQuery)\s*\(\s*(?:document\s*\)\s*\.ready\s*\(|function\s*\()/i;
            if (readyRegex.test(js)) {
                newScript.setAttribute('data-mbn-blob-lastload', '1');
            }
  
            // Copy over any other relevant attributes (excluding type and src)
            for (var i = 0; i < script.attributes.length; i++) {
                var attr = script.attributes[i];
                if (attr.name !== 'type' && attr.name !== 'src') {
                    newScript.setAttribute(attr.name, attr.value);
                }
            }
  
            // Replace the old script with the new one
            script.parentNode.replaceChild(newScript, script);
        }
    });

    // Async function to load a script element and return promise
    function loadScriptAsync(oldScript) {
        return new Promise(function(resolve, reject) {
            var newScript = document.createElement('script');
            newScript.type = 'text/javascript';
            newScript.src = oldScript.src;
  
            // Copy over other attributes except type, src, data-mbn-blob-inlined
            for (var i = 0; i < oldScript.attributes.length; i++) {
                var attr = oldScript.attributes[i];
                if (['type', 'src', 'data-mbn-blob-inlined'].indexOf(attr.name) === -1) {
                    newScript.setAttribute(attr.name, attr.value);
                }
            }
  
            newScript.onload = function() {
                resolve();
            };
            newScript.onerror = function() {
                // Even on error, proceed to next
                resolve();
            };
  
            oldScript.parentNode.replaceChild(newScript, oldScript);
        });
    }

    // Async function to sequentially load scripts using async/await
    async function loadScriptsSequentiallyAsync(scripts) {
        for (let script of scripts) {
            await loadScriptAsync(script);
        }
    }

    // Helper: trigger jQuery ready and native DOMContentLoaded/document ready events
    function triggerDOMReadyEvents() {
        // 1. Native DOMContentLoaded
        if (typeof document !== "undefined" && typeof document.createEvent === "function") {
            var DOMContentLoadedEvent = document.createEvent('Event');
            DOMContentLoadedEvent.initEvent('DOMContentLoaded', true, true);
            document.dispatchEvent(DOMContentLoadedEvent);
        }

        // 2. jQuery document ready (simulate $.ready() and $(document).ready())
        if (window.jQuery && typeof window.jQuery === "function") {
            // Simulate $(document).ready()
            window.jQuery(document).triggerHandler("ready");
            window.jQuery(document).triggerHandler("DOMContentLoaded");
            // Try also $(function(){...})
            if (typeof window.jQuery.ready === "function") {
                window.jQuery.ready();
            }
        }

        // 3. Attempt to trigger document 'readystatechange' if needed
        if (typeof document !== "undefined") {
            var readyStateChange = document.createEvent('Event');
            readyStateChange.initEvent('readystatechange', true, true);
            document.dispatchEvent(readyStateChange);
        }

        // 4. Remove temporary Oxygen menu CSS after initialization
        setTimeout(function() {
            var tempStyle = document.getElementById('mbn-oxygen-menu-preload');
            if (tempStyle) {
                tempStyle.remove();
            }
        }, 500);
    }

    // Helper: trigger window load event
    function triggerWindowLoadEvent() {
        if (typeof window !== "undefined") {
            var loadEvent;
            if (typeof Event === "function") {
                loadEvent = new Event('load');
            } else {
                loadEvent = document.createEvent('Event');
                loadEvent.initEvent('load', true, true);
            }
            window.dispatchEvent(loadEvent);
        }
    }

    async function triggerLoad() {
        // First load all scripts without data-mbn-blob-lastload sequentially
        await loadScriptsSequentiallyAsync(Array.prototype.slice.call(
            document.querySelectorAll('script[type="mbn-scripts-load"][src]:not([data-mbn-blob-lastload])')
        ));

        // Then load all scripts with data-mbn-blob-lastload sequentially
        await loadScriptsSequentiallyAsync(Array.prototype.slice.call(
            document.querySelectorAll('script[type="mbn-scripts-load"][src][data-mbn-blob-lastload]')
        ));

        // After ALL scripts loaded, trigger document ready/DOMContentLoaded/$(document).ready and window load
        triggerDOMReadyEvents();
        triggerWindowLoadEvent();
    }

    function setupInteractionListeners() {
        const events = [
            'mousedown',
            'mousemove',
            'touchstart',
            'touchmove',
            'touchend',
            'wheel',
            'keydown',
            'click',
            'scroll'
        ];

        async function loadDeferredScripts() {
            await loadScriptsSequentiallyAsync(Array.prototype.slice.call(
                document.querySelectorAll('script[type="mbn-scripts-load"][src]:not([data-mbn-blob-lastload])')
            ));
            await loadScriptsSequentiallyAsync(Array.prototype.slice.call(
                document.querySelectorAll('script[type="mbn-scripts-load"][src][data-mbn-blob-lastload]')
            ));

            // After ALL scripts loaded, trigger document ready/DOMContentLoaded/$(document).ready and window load
            triggerDOMReadyEvents();
            triggerWindowLoadEvent();
        }

        async function onInteraction() {
            // Remove all event listeners
            events.forEach(function(event) {
                window.removeEventListener(event, onInteraction, { passive: true });
                document.removeEventListener(event, onInteraction, { passive: true });
            });

            // Clear timeout if it exists
            if (window.mbnScriptTimeout) {
                clearTimeout(window.mbnScriptTimeout);
            }

            await loadDeferredScripts();
        }

        // Add event listeners
        events.forEach(function(event) {
            window.addEventListener(event, onInteraction, { passive: true });
            document.addEventListener(event, onInteraction, { passive: true });
        });

        // Set 4-second timeout fallback
        window.mbnScriptTimeout = setTimeout(function() {
            // Remove all event listeners
            events.forEach(function(event) {
                window.removeEventListener(event, onInteraction, { passive: true });
                document.removeEventListener(event, onInteraction, { passive: true });
            });

            // Load scripts
            loadDeferredScripts();
        }, 4000);
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupInteractionListeners);
    } else {
        setupInteractionListeners();
    }

})();
